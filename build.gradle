plugins {
    id 'java'
    id 'maven-publish'
    id 'fabric-loom' version '0.5-SNAPSHOT' apply false
    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'fabric-loom'
    apply plugin: 'com.matthewprenger.cursegradle'

    project.setGroup(maven_group)
    archivesBaseName = mod_id
    project.setVersion("${mod_version}+${minecraft_version}")

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    loom {
        refmapName = "${mod_id}-refmap.json"
        runDir = "${project.projectDir.getName()}/run/"
    }

    ext {
        dep_chainmail_version = findProject(':chainmail').mod_version
        withoutUnwanted = {
            exclude(module: 'minecraft')
            exclude(module: 'fabric-loader')
            exclude(module: 'fabric-api')
            exclude(module: 'modmenu')
        }
    }

    repositories {
        mavenLocal()
        maven { url 'http://server.bbkr.space:8081/artifactory/libs-release/' }
        maven { url "https://maven.fabricmc.net" }
    }

    dependencies {
        minecraft("com.mojang:minecraft:${minecraft_version}")
        mappings(minecraft.officialMojangMappings())
        modImplementation("net.fabricmc:fabric-loader:${loader_version}")
        modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")  {
            if ('true' == fabric_api_jar_old) {
                exclude(module: "fabric-registry-sync-v0")
                exclude(module: "fabric-biomes-v1")
            }
        }
        modCompile "me.shedaniel:RoughlyEnoughItems:${rei_version}", withoutUnwanted

        modCompile "io.github.prospector:modmenu:${modmenu_version}", withoutUnwanted

        modImplementation "io.github.cottonmc:Jankson-Fabric:${jankson_version}", withoutUnwanted

        compileOnly('com.google.code.findbugs:jsr305:3.0.2')
    }

    afterEvaluate {
        processResources {
            def props = ['mod_version': mod_version,
                         'minecraft_version': minecraft_version,
                         'dep_minecraft_version': dep_minecraft_version,
                         'dep_fabric_loader_version': dep_loader_version,
                         'dep_fabric_version': dep_fabric_version,
                         'dep_chainmail_version': dep_chainmail_version]
            inputs.properties props
            filesMatching('fabric.mod.json') { expand props }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.java
    }

    jar { from('LICENSE') }
    sourcesJar {from('LICENSE')}

    runClient {
        args = ['--username', 'Dev']
    }

    tasks.withType(JavaCompile) { options.setEncoding('UTF-8') }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = mod_id
                artifact(remapJar) {
                    builtBy remapJar
                }
                artifact(sourcesJar) {
                    classifier = 'sources'
                    builtBy remapSourcesJar
                }
            }
        }

        repositories {
            mavenLocal()
        }
    }
}

afterEvaluate {
    file("${project.projectDir}/${project.projectDir.getName()}").deleteDir()
}